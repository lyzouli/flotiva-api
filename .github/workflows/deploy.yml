name: Deploy to Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # ⚠️ Décommente si tes secrets sont dans un Environment nommé "production"
    # environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pre-flight | Vérifier secrets non vides
        run: |
          test -n "${{ secrets.SSH_HOST }}" || { echo "❌ SSH_HOST manquant"; exit 1; }
          test -n "${{ secrets.SSH_USER }}" || { echo "❌ SSH_USER manquant"; exit 1; }
          test -n "${{ secrets.SSH_PORT }}" || { echo "❌ SSH_PORT manquant"; exit 1; }
          test -n "${{ secrets.SSH_KEY }}"  || { echo "❌ SSH_KEY manquant"; exit 1; }
          test -n "${{ secrets.REMOTE_PATH }}" || { echo "❌ REMOTE_PATH manquant"; exit 1; }
          test -n "${{ secrets.PHP_CMD }}" || { echo "❌ PHP_CMD manquant"; exit 1; }
          test -n "${{ secrets.COMPOSER_BIN }}" || { echo "❌ COMPOSER_BIN manquant"; exit 1; }
          echo "✅ Secrets OK"

      - name: Prepare SSH key file
        id: keyfile
        shell: bash
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          set -euo pipefail
          KEY_PATH="$RUNNER_TEMP/gha_deploy_key"
          printf "%s" "$SSH_KEY" > "$KEY_PATH"
          chmod 600 "$KEY_PATH"
          echo "key_path=$KEY_PATH" >> "$GITHUB_OUTPUT"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key_path: ${{ steps.keyfile.outputs.key_path }}  # ✅ on passe par un fichier
          script_stop: true
          script: |
            set -euo pipefail

            echo "➡️  CD vers dossier"
            cd ${{ secrets.REMOTE_PATH }}

            echo "➡️  Bootstrap/FETCH code"
            if [ ! -d ".git" ]; then
              git init
              git remote add origin git@github.com:${{ github.repository }}.git
              git fetch origin main
              git checkout -t origin/main
            else
              git fetch origin main
              git checkout main
              git reset --hard origin/main
            fi

            echo "➡️  Dépendances PROD (Composer)"
            ${{ secrets.COMPOSER_BIN }} install --no-dev --prefer-dist --no-interaction --optimize-autoloader

            echo "➡️  Nettoyage caches"
            ${{ secrets.PHP_CMD }} artisan config:clear || true
            ${{ secrets.PHP_CMD }} artisan route:clear || true
            ${{ secrets.PHP_CMD }} artisan view:clear || true

            echo "➡️  Rebuild caches"
            ${{ secrets.PHP_CMD }} artisan config:cache
            ${{ secrets.PHP_CMD }} artisan route:cache
            ${{ secrets.PHP_CMD }} artisan view:cache

            echo "➡️  Migrations DB"
            ${{ secrets.PHP_CMD }} artisan migrate --force

            echo "➡️  Storage & queues"
            ${{ secrets.PHP_CMD }} artisan storage:link || true
            ${{ secrets.PHP_CMD }} artisan queue:restart || true

            echo "➡️  Permissions"
            chgrp -R www-data storage bootstrap/cache || true
            chmod -R ug+rwx storage bootstrap/cache || true

            echo "✅ Déploiement terminé"
